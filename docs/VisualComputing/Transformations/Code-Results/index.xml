<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Visual Crackers ðŸ’¥</title><link>https://visualcrackers.github.io/showcase/docs/VisualComputing/Transformations/Code-Results/</link><description>Recent content on Visual Crackers ðŸ’¥</description><generator>Hugo -- gohugo.io</generator><language>es-es</language><atom:link href="https://visualcrackers.github.io/showcase/docs/VisualComputing/Transformations/Code-Results/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://visualcrackers.github.io/showcase/docs/VisualComputing/Transformations/Code-Results/2D-Solar-System/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcrackers.github.io/showcase/docs/VisualComputing/Transformations/Code-Results/2D-Solar-System/</guid><description>2D Solar System # One way we can easily understand how these transformations work is by recreating a basic 2D solar system. In this model, we can see how objects move in relating to others by observing how the planets rotate around the sun, and how the moon rotates around the earth.
How does it work? # First of all, we define the class Planet, which will be used to create the planets and the sun (we know it is not a planet, but for this example it works).</description></item><item><title/><link>https://visualcrackers.github.io/showcase/docs/VisualComputing/Transformations/Code-Results/3D-Solar-System/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcrackers.github.io/showcase/docs/VisualComputing/Transformations/Code-Results/3D-Solar-System/</guid><description>3D Solar System # Now that we have seen how the transformations work in 2D, we can apply them to a 3D model. In addition to that, we will add a bit more of interactivity to the model, so that we can move around the solar system and see it from different perspectives.
A 3D model involves way more transformations than a 2D one, some of which may be really unintuitive, so we will have to be careful with the order in which we apply them.</description></item><item><title/><link>https://visualcrackers.github.io/showcase/docs/VisualComputing/Transformations/Code-Results/Jupiter-Moons/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcrackers.github.io/showcase/docs/VisualComputing/Transformations/Code-Results/Jupiter-Moons/</guid><description>Jupiter and its moons # Once we have the 3D models of the solar system, we can further enhance the level of detail for specific planets, such as Jupiter and its Galilean moons. To make the models more realistic, we employ techniques such as lighting and textures. Lighting plays a crucial role in creating a lifelike appearance. By simulating different light sources, shadows, and reflections, we can bring depth and realism to the scene.</description></item></channel></rss>